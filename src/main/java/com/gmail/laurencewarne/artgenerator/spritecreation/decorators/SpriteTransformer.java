package com.gmail.laurencewarne.artgenerator.spritecreation.decorators;

import com.gmail.laurencewarne.artgenerator.spritecreation.ISpriteGenerator;
import com.gmail.laurencewarne.artgenerator.spritecreation.AbstractSpriteGenerator;
import com.gmail.laurencewarne.artgenerator.cellgrid.ICellGrid;


/**
Acts a superclass for objects which want to act as decorators for sprites. The type
parameter S corresponds to the output type parameter of the decorated ISpriteGenerator, and T corresponds to the output type parameter of teh decorator. 
 */
public abstract class SpriteTransformer<S, T> extends AbstractSpriteGenerator<T> implements ISpriteGenerator<T> {

    private final ISpriteGenerator<S> spriteGenerator;

    public SpriteTransformer( final ISpriteGenerator<S> spriteGenerator ) {
	this.spriteGenerator = spriteGenerator;
    }

    /**
       Get the cell grid generated by the ISpriteGenerator instance this object
       is decorating.
       
       @return the cell grid generated by the instance this object is decorating.
     */
    public ICellGrid<S> genSpriteAsCellGridFromDecoratee() {

	return spriteGenerator.genSpriteAsCellGrid();
    }
    
    /**
    @Override
    public boolean[][] genSprite() {

	return spriteGenerator.genSprite();
    }
    */
    
    @Override
    public int getXLength() {

	return spriteGenerator.getXLength();
    }

    @Override
    public int getYLength() {

	return spriteGenerator.getYLength();
    }

}
